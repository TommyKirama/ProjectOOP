package javafx.example.groupprojecttest2;

import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import javafx.scene.control.ComboBox;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class BudgetPlanning {
    private User user;
    private UserAuthentication userManager;

    public BudgetPlanning(User user, UserAuthentication userManager) {
        this.user = user;
        this.userManager = userManager;
    }

    public void displayBudgetPlanning() {
        Stage stage = new Stage();
        stage.setTitle("Budget Planning");


        Label categoryLabel = new Label("Category:");
        TextField categoryField = new TextField();

        Label amountLabel = new Label("Budget Amount:");
        TextField amountField = new TextField();

        // ComboBox for period
        Label periodLabel = new Label("Period:");
        ComboBox<String> periodComboBox = new ComboBox<>();
        periodComboBox.getItems().addAll("Daily", "Weekly", "Monthly");

        // Button to add budget
        Button addButton = new Button("Add Budget");
        addButton.setOnAction(e -> {
            String selectedPeriod = periodComboBox.getValue();
            addBudget(categoryField.getText(), amountField.getText(), selectedPeriod);
        });
        // Button to close transaction
        Button doneButton = new Button("Done");
        doneButton.setOnAction(e -> {
            stage.close();
            new Dashboard(user, userManager);
        });


        // Layout setup
        GridPane layout = new GridPane();
        layout.setPadding(new Insets(20));
        layout.setVgap(10);
        layout.setHgap(10);
        layout.addRow(0, categoryLabel, categoryField);
        layout.addRow(1, amountLabel, amountField);
        layout.addRow(2, periodLabel, periodComboBox);
        layout.add(addButton, 0, 3);
        layout.add(doneButton, 0, 4);

        Scene scene = new Scene(layout, 800, 400);
        stage.setScene(scene);
        stage.show();
    }

    private void addBudget(String category, String amount, String period) {
        try {
            double amountValue = Double.parseDouble(amount);

            // Write the new budget entry to the user's file
            try (FileWriter writer = new FileWriter(user.getUsername() + ".txt", true)) {
                writer.write(category + ",0.0," + amountValue + "," + period + "\n");
                showNoti("Status", "Budget has been updated.");
            }

            System.out.println("Category: " + category + ", Budget Amount: $" + amountValue);
        } catch (NumberFormatException e) {
            showAlert("Invalid Input", "Amount should be a number.");
        } catch (IOException e) {
            showAlert("File Error", "Could not write to the user file.");
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showNoti(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    public List<String> getCategories() {
        List<String> categories = new ArrayList<>();
        // Load categories from the file
        try (Scanner scanner = new Scanner(new File(user.getUsername() + ".txt"))) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");
                String category = parts[0];
                //filter integer in categories
                if (!category.equals("income") && !containsDigit(category)) {
                    categories.add(category);
                    System.out.println(category);
                }
            }
        } catch(FileNotFoundException e){
                e.printStackTrace();
            }

            return categories;
        }
    private boolean containsDigit(String s) {
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }
}

