package javafx.example.groupprojecttest2;

import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javafx.beans.property.ReadOnlyStringWrapper;
import javafx.geometry.HPos;


public class Transaction {
    private User user;
    private UserAuthentication userManager;
    private static final String TRANSACDIRECTORY_PATH = "D:\\MyProperties\\CSCI 1301 Sect 07 (OOP)OBJECT ORIENTED PROGRAMMING\\GroupProjectTest2";
    private GridPane inputGrid = new GridPane();

    public Transaction(User user, UserAuthentication userManager) {
        this.user = user;
        this.userManager = userManager;
    }


    public void displayTransaction() {
        Stage stage = new Stage();
        stage.setTitle("Make Transaction");

        // Table for displaying Transaction info
        TableView<String> tableView = new TableView<>();
        TableColumn<String, String> dateCol = new TableColumn<>("Date");
        TableColumn<String, String> TypeCol = new TableColumn<>("type");
        TableColumn<String, String> amountCol = new TableColumn<>("Amount");
        TableColumn<String, String> categoryCol = new TableColumn<>("Category");

        dateCol.setCellValueFactory(data -> new ReadOnlyStringWrapper(data.getValue().split(",")[0]));
        TypeCol.setCellValueFactory(data -> new ReadOnlyStringWrapper(data.getValue().split(",")[1]));
        amountCol.setCellValueFactory(data -> new ReadOnlyStringWrapper(data.getValue().split(",")[2]));
        categoryCol.setCellValueFactory(data -> new ReadOnlyStringWrapper(data.getValue().split(",")[3]));

        tableView.getColumns().addAll(dateCol, TypeCol, amountCol, categoryCol);


        // Load data from user's text file
        try {
            File usertransFile = new File(TRANSACDIRECTORY_PATH + "\\" + user.getUsername() + "transac.txt");
            Scanner scanner = new Scanner(usertransFile);

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                System.out.println("Read line: " + line); // Debug print statement
                String[] data = line.split(",");
                String date = data[0];
                String category = data[1];
                double amount = Double.parseDouble(data[2]);
                String desc = data[3];

                tableView.getItems().add(date + "," + category + "," + amount + "," + desc);
            }

            scanner.close();

            // Debug print statement to check the size of items list
            System.out.println("Items size: " + tableView.getItems().size());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        // Add column separators
        tableView.setStyle("-fx-column-reorder-disabled: true;");
        tableView.setStyle("-fx-padding: 0 0;");
        dateCol.setStyle("-fx-border-width: 0 1px 0 0; -fx-border-color: black;");
        TypeCol.setStyle("-fx-border-width: 0 1px 0 0; -fx-border-color: black;");
        amountCol.setStyle("-fx-border-width: 0 1px 0 1px; -fx-border-color: black;");
        categoryCol.setStyle("-fx-border-width: 0 0 0 1px; -fx-border-color: black;");

        // Labels and TextFields for input
        Label typeLabel = new Label("Income/Expense::");
        ComboBox<String> typeField = new ComboBox<>();
        typeField.getItems().addAll("Income", "Expense");

        Label amountLabel = new Label(" Amount:");
        TextField amountField = new TextField();
        Label dateLabel = new Label("Date:");
        DatePicker datePicker = new DatePicker();
        Label categoryLabel = new Label("Category:");
        ComboBox<String> categoryField = new ComboBox<>();
        // Populate the ComboBox with categories from BudgetPlanning
        categoryField.getItems().addAll(new BudgetPlanning(user, userManager).getCategories());
        //category field appear for income
        Label categoryIncomeLabel = new Label(" Category:");
        TextField categoryIncomeField = new TextField();
        // Add category field only if Expense is selected
        typeField.valueProperty().addListener((observable, oldValue, newValue) -> {
            inputGrid.getChildren().remove(categoryLabel);
            inputGrid.getChildren().remove(categoryField);
            inputGrid.getChildren().remove(categoryIncomeLabel);
            inputGrid.getChildren().remove(categoryIncomeField);
            if ("Income".equals(newValue)) {
                inputGrid.addRow(3, categoryLabel, categoryField);
            } else if ("Expense".equals(newValue)) {
                inputGrid.addRow(3, categoryIncomeLabel, categoryIncomeField);
            }
        });

        // Button to add expense
        Button addButton = new Button("Add Transaction");
        addButton.setOnAction(e -> {
            String type = typeField.getValue();
            if("Expense".equals(type)){
                addExpense(categoryField.getValue(), amountField.getText());
                String date = datePicker.getValue().toString();
                String amount = amountField.getText();
                String category = categoryField.getValue();

                String csvLine = String.join(",", date, type, amount, category);

                try (BufferedWriter writer = new BufferedWriter(new FileWriter(TRANSACDIRECTORY_PATH + "\\" + user.getUsername() + "transac.txt", true))) {
                    writer.write(csvLine);
                    writer.newLine();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
            else if("Income".equals(type)){
                addIncome(categoryIncomeField.getText(), amountField.getText());
                String date = datePicker.getValue().toString();
                String amount = amountField.getText();
                String categoryIncome = categoryIncomeField.getText();

                String csvLine = String.join(",", date, type, amount, categoryIncome);

                try (BufferedWriter writer = new BufferedWriter(new FileWriter(TRANSACDIRECTORY_PATH + "\\" + user.getUsername() + "transac.txt", true))) {
                    writer.write(csvLine);
                    writer.newLine();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }

            else
                showAlert("Invalid Input", "Type should only be Income or Expenses.");
        });
        // Button to close transaction
        Button doneButton = new Button("Done");
        doneButton.setOnAction(e -> {
            stage.close();
            new Dashboard(user, userManager);
            });

        //delete row from table
        Button deleteButton = new Button("Delete");
        deleteButton.setPrefWidth(100);
        deleteButton.setOnAction(actionEvent -> {
            int  row = tableView.getSelectionModel().getSelectedIndex();
            try {
                delete(row, tableView);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        // Layout setup
        GridPane inputGrid = new GridPane();
        inputGrid.setPadding(new Insets(20));
        inputGrid.setVgap(10);
        inputGrid.setHgap(10);
        inputGrid.addRow(0, dateLabel, datePicker);
        inputGrid.addRow(1, typeLabel, typeField);
        inputGrid.addRow(2, amountLabel, amountField);
        inputGrid.addRow(3, categoryLabel, categoryField);
        inputGrid.addRow(4, categoryIncomeLabel, categoryIncomeField);
        inputGrid.add(addButton, 0, 5);
        inputGrid.add(doneButton, 1, 5);
        inputGrid.add(deleteButton, 2, 5);

        GridPane mainGrid = new GridPane();
        mainGrid.setPadding(new Insets(20));
        mainGrid.setVgap(20);
        mainGrid.setHgap(20);
        mainGrid.add(inputGrid, 0, 0);
        mainGrid.add(tableView, 1, 0);
        GridPane.setHalignment(tableView, HPos.CENTER);

        Scene scene = new Scene(mainGrid, 800, 400);
        stage.setScene(scene);
        stage.show();
    }
//update file after deleting the row
    private void delete(int row, TableView<String> tableView) throws IOException {
        if (row >= 0) {
            tableView.getItems().remove(row);
            // Get the updated list of transactions from the TableView
            List<String> updatedTable = new ArrayList<>(tableView.getItems());
            // Write the updated transactions back to the file
            File file = new File(TRANSACDIRECTORY_PATH + "\\" + user.getUsername() + "transac.txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                for (String line : updatedTable) {
                    writer.write(line);
                    writer.newLine();
                }
            }
        }
    }

    private void addExpense(String category, String amount) {
        try {
            double amountValue = Double.parseDouble(amount);
            List<String> lines = new ArrayList<>();
            boolean categoryFound = false;

            // Read and update the user's file
            try (BufferedReader reader = new BufferedReader(new FileReader(user.getUsername() + ".txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.startsWith(category + ",")) {
                        categoryFound = true;
                        String[] parts = line.split(",");
                        double currentExpenses = Double.parseDouble(parts[1]);
                        double newExpenses = currentExpenses + amountValue;
                        lines.add(parts[0] + "," + newExpenses + "," + parts[2] + "," + parts[3]);
                        showNoti("Status", "Expenses is succesfully added.");

                    } else {
                        lines.add(line);
                    }
                }
            }

            if (!categoryFound) {
                showAlert("Error", "Description doesn't match existing budget category.");
                return;
            }

            // Write the updated lines back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(user.getUsername() + ".txt"))) {
                for (String line : lines) {
                    writer.write(line);
                    writer.newLine();
                }
            }

            System.out.println("Category: " + category + ", Expense Added: $" + amountValue);
        } catch (NumberFormatException e) {
            showAlert("Invalid Input", "Amount should be a number.");
        } catch (IOException e) {
            showAlert("File Error", "Could not read or write the user file.");
        }

    }

    private void addIncome(String category, String amount) {
        try {
            double amountValue = Double.parseDouble(amount);
            List<String> lines = new ArrayList<>();
            boolean incomeUpdated = false;

            // Read and update the user's file
            try (BufferedReader reader = new BufferedReader(new FileReader(user.getUsername() + ".txt"))) {
                String line;
                // Update total income (first line)
                if ((line = reader.readLine()) != null) {
                    double currentIncome = Double.parseDouble(line);
                    double newIncome = currentIncome + amountValue;
                    lines.add(String.valueOf(newIncome));
                    incomeUpdated = true;
                }

                // Read the remaining lines
                while ((line = reader.readLine()) != null) {
                    lines.add(line);
                }
            }

            if (!incomeUpdated) {
                showAlert("Error", "Failed to update income.");
                return;
            }

            // Write the updated lines back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(user.getUsername() + ".txt"))) {
                for (String updatedLine : lines) {
                    writer.write(updatedLine);
                    writer.newLine();
                }
            }

            showNoti("Status", "Income is successfully added.");
            System.out.println("Income Added: $" + amountValue);
        } catch (NumberFormatException e) {
            showAlert("Invalid Input", "Amount should be a number.");
        } catch (IOException e) {
            showAlert("File Error", "Could not read or write the user file.");
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
    private void showNoti(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
